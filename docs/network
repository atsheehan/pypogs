=== SERVER ===

Server uses the Twisted framework and TCP.

The server listens for incoming connections and stores the user's
address in a waiting list. For every user added, the waiting list is
checked to see if there are enough players to start a game. If there
are, the connection info for the players chosen will be passed into a
separate thread.

The new thread will receive the connection info for the players in the
game and start up a game instance. The tick method of the game
instance will be scheduled via Twisted and send out updates to the
clients several times a second. Since we are using TCP and we know
that the clients have received all previous packets, we can just
send deltas for the game state to each client to reduce the amount of
data being transferred.


=== MESSAGES ===

* Client -> Server
** JOIN - the client wants to join a game
** INPUT - the client is moving the piece
** QUIT - the client is leaving the game

* Server -> Client
** JOINED - acknowledge that the server stored the users connection
** STARTING - the game is starting with the initial state
** UPDATE - update to the previous state
** ENDING - the game is over, no more updates


=== TCP vs. UDP ===

For a networked game, the world runs on the server and updates are
sent to all connected clients several times per second. For sending
out updates, it might be faster and easier to use UDP to send out
packets containing the entire world state to each of the clients. The
problem with UDP is that a lot of other things need to be handled as
well, including checking for data integrity, ordering of packets and
checking for duplicate packets, acknowledging important packets, etc.

If using TCP, data integrity and ordering is guaranteed, connection
handshake is done automatically, and easier to use with
SSL/TLS. Requires some additional overhead, but might not be
noticeable enough to care.

If a packet is dropped or corrupted, the stream will pause until that
packet is retransmitted which could cause significant delays in the
game. Possibly have the client update the game locally until the next
packet is received so it appears to continue running, and then sync
with the server later.
